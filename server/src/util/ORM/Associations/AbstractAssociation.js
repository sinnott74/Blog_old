const DataTypes = require('../DataTypes');

class AbstractAssociation {

  constructor(source, target, options) {
    if (this.constructor === AbstractAssociation) {
      throw new Error('This Class should not be instantiated, please extend');
    }
    this.source = source;
    this.target = target;
    this.options = {
      ...options
    }
  }

  _addForeignKeyConstraints() {
  }

  /**
   *
   * @param {Query} query
   */
  buildQuery(query) {
  }

  /**
   * Adds an foreign reference to the table of modelReferencing, referencing the table of modelBeingReferenced
   * @param {*} modelBeingReferenced
   * @param {*} modelReferencing
   */
  _addReferenceID(modelBeingReferenced, modelReferencing){
    let referenceAttribute = {};
    let referenceAttributeName = `${modelBeingReferenced.name}_id`;
    referenceAttribute[referenceAttributeName] = {
      type: DataTypes.INT,
      notNull: true,
      autoIncrement: true,
      _autoGenerated: true,
      references: {
        table: modelBeingReferenced.name,
        column: 'id'
      }
    }
    modelReferencing.rawAttributes = {
      ...modelReferencing.rawAttributes,
      ...referenceAttribute
    }

    this._addGetterAndSetter(modelReferencing, referenceAttributeName);

    modelReferencing.refreshAttributes();
  }

  /**
   * Adds a getter & setter onto the prototype of the given model.
   * @param {Model} model Model to add the getter & setter to
   * @param {String} name Attribute name
   */
  _addGetterAndSetter(model, name) {
    // Add getter & setter for foreign reference
    Object.defineProperty(model.prototype, name, {
      get: function() {
        return this.get(name);
      },
      set: function() {
        this.set(name);
      }
    })
  }
}

module.exports = AbstractAssociation;